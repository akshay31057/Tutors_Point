
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author hp-
 */
public class TeacherVideos extends javax.swing.JFrame implements Serializable{

    /**
     * Creates new form Videos
     */
    static Socket socket;
    static TeacherData teacher;
    static DataInputStream din;
    static DataOutputStream dout;
    static ObjectInputStream doin;
    static ObjectOutputStream doout;
    static FetchSubtopicData fData;
    static  public int port;
    public TeacherVideos(Socket socke,ObjectOutputStream doou,ObjectInputStream doi,DataOutputStream dou,DataInputStream di,FetchSubtopicData fDat,TeacherData teach) {
        doout=doou;
        doin=doi;
        dout=dou;
        din=di;
        fData=fDat;
        socket= socke;
        teacher=teach;
        
        initComponents();
        fDat.setTeacherName(teacher.getName());
        fDat.setTeacherReference(teacher.getReferece());
        FetchSubtopicData fD =new FetchSubtopicData();
        fD.setCourseName(fDat.getCourseName());
        fD.setRequest(fDat.getRequest());
        fD.setSubtopicName(fDat.getSubtopicName());
        fD.setTeacherName(fDat.getTeacherName());
        fD.setTeacherReference(fDat.getTeacherReference());
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        VideoList.addMouseListener(new PopClickListener(VideoList,doout,fD));
        RefreshButtonActionPerformed(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Header = new javax.swing.JPanel();
        SubTopicLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        VideoList = new javax.swing.JList();
        AddVideoButton = new javax.swing.JButton();
        RefreshButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        SubTopicLabel.setFont(new java.awt.Font("Monotype Corsiva", 3, 18)); // NOI18N
        SubTopicLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        SubTopicLabel.setText("VIDEOS");

        javax.swing.GroupLayout HeaderLayout = new javax.swing.GroupLayout(Header);
        Header.setLayout(HeaderLayout);
        HeaderLayout.setHorizontalGroup(
            HeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, HeaderLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(SubTopicLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(196, 196, 196))
        );
        HeaderLayout.setVerticalGroup(
            HeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, HeaderLayout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .addComponent(SubTopicLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        VideoList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { " " };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        VideoList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                VideoListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(VideoList);

        AddVideoButton.setText("AddVideo");
        AddVideoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddVideoButtonActionPerformed(evt);
            }
        });

        RefreshButton.setText("Refresh");
        RefreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Header, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(AddVideoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(RefreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(Header, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddVideoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RefreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void RefreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshButtonActionPerformed
        // TODO add your handling code here:
        try{
            FetchSubtopicData fata=new FetchSubtopicData();
            fata.setCourseName(fData.getCourseName());
            fata.setSubtopicName(fData.getSubtopicName());
            fata.setTeacherName(teacher.getName());
            fata.setTeacherReference(teacher.getReferece());
            fata.setRequest(10);
            doout.writeObject(fata);
            
            DefaultListModel<Video> model=new DefaultListModel<Video>();
            String str="";
            str=(String)din.readUTF();
            int reference = Integer.parseInt(str);
            if(reference==1){
            model=(DefaultListModel)doin.readObject();
            VideoList.setModel(model);
            //VideoList.setModel(listModel);
            VideoList.setCellRenderer(new CountryRenderer());
            
            }
            else {
                System.out.println("List not returned");
            }
        
        /*Video v1 = new Video("Learning Java by John A. Cena", "vid2.mp4","A");
        Video v2 = new Video("Learning Java by John A. Cena", "vid2.mp4","A");
        Video v3 = new Video("Learning Java by John A. Cena", "vid2.mp4","D");
       // Video v4 = new Video("Learning Java by John A. Cena", "vid2.mp4");
        //Video v5 = new Video("Learning Java by John A. Cena","vid2.mp4");
 
        //create the model and add elements
        DefaultListModel<Video> listModel = new DefaultListModel<>();
        listModel.addElement(v1);
        listModel.addElement(v2);
        listModel.addElement(v3);
        VideoList.setModel(listModel);
           //VideoList.setModel(listModel);
           VideoList.setCellRenderer(new CountryRenderer());
        //listModel.addElement(v4);
        //listModel.addElement(v5);
        
 */
        //create the list
        
        }
        catch(Exception e){
            System.out.println("Unable to fetch list");
            e.printStackTrace();
        }
        
    }//GEN-LAST:event_RefreshButtonActionPerformed

    private void AddVideoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddVideoButtonActionPerformed
        // TODO add your handling code here:
        try{
        //FetchSubtopicData fData=new FetchSubtopicData();
        
          //  System.out.println(teacher.getName()+" "+fData.getTeacherName());
        //fData.setRequest(5);
        FetchSubtopicData fD=new FetchSubtopicData();
        fD.setCourseName(fData.getCourseName());
        fD.setSubtopicName(fData.getSubtopicName());
        
        fD.setTeacherReference(teacher.getReferece());
        fD.setTeacherName(teacher.getName());
        
        System.out.println(teacher.getName()+" "+fD.getTeacherName());
        fD.setRequest(5);
        
        doout.writeObject(fD);
        TCPDataClient tcpD=new TCPDataClient(dout, din);
        tcpD.upload();
        dout.writeUTF(tcpD.target_file.getName().toString());
        //fData.setVideoName(tcpD.target_file.getName().toString());
        String str=din.readUTF();
        int reference=Integer.parseInt(str);
        if(reference==1)
        {
            ;
        }
        else {
            JOptionPane.showMessageDialog(this,"Database not updated!!");
        }
        
        }
        catch(Exception e)
        {
            System.out.println("Unable to upload!!!");
        }
       /* try{
            fData.setRequest(10);
            doout.writeObject(fData);
            
            DefaultListModel<Video> model=new DefaultListModel<Video>();
            String str="";
            str=(String)din.readUTF();
            int reference = Integer.parseInt(str);
            if(reference==1){
            model=(DefaultListModel)doin.readObject();
            VideoList.setModel(model);
            //VideoList.setModel(listModel);
            VideoList.setCellRenderer(new CountryRenderer());
            }
            else {
                System.out.println("List not returned");
            }
                    }
        catch(Exception e){
            System.out.println("Unable to fetch list");
        }*/


    }//GEN-LAST:event_AddVideoButtonActionPerformed

    private void VideoListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_VideoListMouseClicked
  if (evt.getClickCount() == 2) {
               try {
            // TODO add your handling code here:
            System.out.println((socket.getInetAddress().toString()).substring(1));
            FetchSubtopicData fDat= new FetchSubtopicData();
            fDat.setTeacherReference(teacher.getReferece());
            fDat.setTeacherName(teacher.getName());
            fDat.setRequest(11);
            
            doout.writeObject(fDat);
            port= din.readInt();
            String selVideo=((Video)(VideoList.getModel().getElementAt(VideoList.getSelectedIndex()))).getPath();
            dout.writeUTF(selVideo);
            String[] arr=new String[1];
            arr[0]=selVideo;
            
            //MediaPlayer mediaPlayer=new MediaPlayer();
            //mediaPlayer.Run(arr);
            FetchSubtopicData fD=fData;
            fD.setVideoName(selVideo);
            fD.setTeacherName(teacher.getName());
            new Thread(new MediaPlayer(socket,port,fD,doout)).start();
            //this.setVisible(true);
            
        } catch (IOException ex) {
            Logger.getLogger(TeacherVideos.class.getName()).log(Level.SEVERE, null, ex);
        }
  }
    }//GEN-LAST:event_VideoListMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TeacherVideos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TeacherVideos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TeacherVideos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TeacherVideos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TeacherVideos(socket,doout,doin,dout,din,fData,teacher).setVisible(true);
            }
        });
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddVideoButton;
    private javax.swing.JPanel Header;
    private javax.swing.JButton RefreshButton;
    private javax.swing.JLabel SubTopicLabel;
    private javax.swing.JList VideoList;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}

