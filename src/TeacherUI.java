
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author hp-
 */
public class TeacherUI extends javax.swing.JFrame implements Serializable
{
    /*static ObjectOutputStream doout;
    static ObjectInputStream doin;
    static DataInputStream din;
    static DataOutputStream dout;
    */
    public static TeacherData teacher;
    public static Socket socket;
    public static ObjectOutputStream doout;
    public static ObjectInputStream doin;
    public static DataOutputStream dout;
    public static DataInputStream din;
   // DataOutputStream d;
    BufferedReader in;
    String str;
    //StudentData msgStudent;
    //TeacherData msgTeacher;
    private int PORT;
    private String HOST;
    static TeacherUIData teacherUiData;
    /**
     * Creates new form TeacherUI
     */
   /* public TeacherUI(DataOutputStream dou,DataInputStream di,ObjectOutputStream doou,ObjectInputStream doi,TeacherData teache)  {
        doout=doou;
        doin=doi;
        teacher=teache;
        din=di;
        dout=dou;
        try{
         doout.writeObject(teacher);
         String str=(String)din.readUTF();
         int response= Integer.parseInt(str);
         DefaultListModel model=new DefaultListModel();
         if(response==1){
         model=(DefaultListModel)doin.readObject();
         courseList.setModel(model);
         }
         else JOptionPane.showMessageDialog(this, "No data to fetch");
        }
        catch(Exception e)
        {
            System.out.println("Unable to connect!!");;
        }
        initComponents();
    }*/
    public void exitProcedure(){
        try {
            this.socket.close();
        } catch (IOException ex) {
            System.out.println("Socket Not Closed!!");
            Logger.getLogger(TeacherUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
       // this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
                
        
    }
    public TeacherUI(ObjectOutputStream doout,ObjectInputStream doin,DataOutputStream dout,DataInputStream din,Socket socket,TeacherData msgTeacher){
        //HOST="127.0.0.1";
        //PORT=5000;
        teacher=msgTeacher;
//        msgStudent=new StudentData();
        //msgTeacher=new TeacherData();
        
        this.socket =socket;
        this.doout=doout;  
        this.doin=doin;
        this.dout=dout;
        this.din=din;
        teacher.setRequest(7);
        
        
        initComponents();
        refreshButtonActionPerformed(null);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.addWindowListener(new 
        WindowAdapter() {
        @Override
        public void windowClosing(WindowEvent event) {
            try {
                socket.close();
            } catch (IOException ex) {
                Logger.getLogger(TeacherUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            
                    
        }

            private void setDefaultCloseOperation(int EXIT_ON_CLOSE) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        });
    }
        
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        teacherHeaderPanel = new javax.swing.JPanel();
        teacherNameLabel = new javax.swing.JLabel();
        teacherReferenceLabel = new javax.swing.JLabel();
        refreshButton = new javax.swing.JButton();
        teacherCoursePanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        courseList = new javax.swing.JList();
        addCourseButton = new javax.swing.JButton();
        teacherSubtopicPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        subtopicList = new javax.swing.JList();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        teacherNameLabel.setFont(new java.awt.Font("Monotype Corsiva", 3, 20)); // NOI18N
        teacherNameLabel.setText("Teacher Name");

        teacherReferenceLabel.setFont(new java.awt.Font("Monotype Corsiva", 3, 20)); // NOI18N
        teacherReferenceLabel.setText("Reference No");

        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout teacherHeaderPanelLayout = new javax.swing.GroupLayout(teacherHeaderPanel);
        teacherHeaderPanel.setLayout(teacherHeaderPanelLayout);
        teacherHeaderPanelLayout.setHorizontalGroup(
            teacherHeaderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(teacherHeaderPanelLayout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(teacherNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addComponent(refreshButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(teacherReferenceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39))
        );
        teacherHeaderPanelLayout.setVerticalGroup(
            teacherHeaderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(teacherHeaderPanelLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(teacherHeaderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(teacherReferenceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(teacherNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(refreshButton))
                .addContainerGap(35, Short.MAX_VALUE))
        );

        courseList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                courseListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(courseList);

        addCourseButton.setText("Add Course");
        addCourseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCourseButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout teacherCoursePanelLayout = new javax.swing.GroupLayout(teacherCoursePanel);
        teacherCoursePanel.setLayout(teacherCoursePanelLayout);
        teacherCoursePanelLayout.setHorizontalGroup(
            teacherCoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addComponent(addCourseButton, javax.swing.GroupLayout.DEFAULT_SIZE, 269, Short.MAX_VALUE)
        );
        teacherCoursePanelLayout.setVerticalGroup(
            teacherCoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(teacherCoursePanelLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addCourseButton, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE))
        );

        subtopicList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { " " };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        subtopicList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                subtopicListMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(subtopicList);

        jButton2.setText("Add Sub-Topic");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout teacherSubtopicPanelLayout = new javax.swing.GroupLayout(teacherSubtopicPanel);
        teacherSubtopicPanel.setLayout(teacherSubtopicPanelLayout);
        teacherSubtopicPanelLayout.setHorizontalGroup(
            teacherSubtopicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
            .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 268, Short.MAX_VALUE)
        );
        teacherSubtopicPanelLayout.setVerticalGroup(
            teacherSubtopicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(teacherSubtopicPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 404, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(teacherHeaderPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(teacherCoursePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(teacherSubtopicPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(teacherHeaderPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(teacherCoursePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(teacherSubtopicPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private boolean  check(String course){
        if(course.length()!=6)
            return false;
        if(course.charAt(0)<'A'||(course.charAt(0)>'Z'))
            return false;
               if(course.charAt(1)<'A'||(course.charAt(1)>'Z'))
            return false;
        if(course.charAt(0)<'A'||(course.charAt(0)>'Z'))
            return false;
               if(course.charAt(2)<'0'||(course.charAt(2)>'9'))
            return false;
                              if(course.charAt(3)<'0'||(course.charAt(3)>'9'))
            return false;
                              
                              if(course.charAt(4)<'0'||(course.charAt(4)>'9'))
            return false;
                              
                              if(course.charAt(5)<'0'||(course.charAt(5)>'9'))
            return false;
                              return true;
    }
    private void addCourseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCourseButtonActionPerformed
        //JOptionPane.showInputDialog("Hello").getBytes();
        String course=JOptionPane.showInputDialog("Enter Course Code(Format:CS1404)");
        if(check(course)==false)
            JOptionPane.showMessageDialog(this, "Enter valid course name.");
        else 
        {
            try{
         FetchSubtopicData fData=new FetchSubtopicData();
         fData.setCourseName(course);
         fData.setRequest(9);
         doout.writeObject(fData);
         String str=(String)din.readUTF();
           int reference= Integer.parseInt(str);
           if(reference == 1)
                {
                DefaultListModel mod=new DefaultListModel();
            int i;
            refreshButtonActionPerformed(null);
           /* int pos=courseList.getModel().getSize();
            for(i=0;i<pos;i++)
            {
                mod.add(i,courseList.getModel().getElementAt(i).toString());
            }
                mod.add(i,course);
                courseList.setModel(mod);
            */
            
                }
           else JOptionPane.showMessageDialog(this, "Course already exists!!");
           
         
            }
            catch(Exception e)
            {
                System.out.println("Unable to add course");
            }
        }
//TeacherUIData teacherUiData=new TeacherUIData();
       
        
    }//GEN-LAST:event_addCourseButtonActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if(!(courseList.getSelectedIndex()>=0))
            JOptionPane.showMessageDialog(null,"Please Select a course.");
        else 
        {
            String course=JOptionPane.showInputDialog("Enter Subtopic Name ");
        
            try{
         FetchSubtopicData fData=new FetchSubtopicData();
         fData.setCourseName(courseList.getSelectedValue().toString());
         fData.setTeacherReference(teacher.getReferece());
         fData.setRequest(6);
         fData.setSubtopicName(course);
         doout.writeObject(fData);
         String str=(String)din.readUTF();
           int reference= Integer.parseInt(str);
           if(reference == 1)
                {
                DefaultListModel mod=new DefaultListModel();
            int i;
            int pos=subtopicList.getModel().getSize();
            for(i=0;i<pos;i++)
            {
                mod.add(i,subtopicList.getModel().getElementAt(i).toString());
            }
                mod.add(i,course);
                subtopicList.setModel(mod);
            
                }
           else JOptionPane.showMessageDialog(this, "Subtopic already exists!!");
           
         
            }
            catch(Exception e)
            {
                System.out.println("Unable to add subtopic");
            }
        
//TeacherUIData teacherUiData=new TeacherUIData();
        
        
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void courseListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_courseListMouseClicked
        // TODO add your handling code here:
         if (evt.getClickCount() == 2) {
            
             try{

           String selectedItem = (String) courseList.getSelectedValue();
           // add selectedItem to your second list.
           FetchSubtopicData fData=new FetchSubtopicData();
           fData.setRequest(8);
           fData.setCourseName(selectedItem);
           DefaultListModel model = new DefaultListModel();
           doout.writeObject(fData);
           String str=(String)din.readUTF();
           int reference= Integer.parseInt(str);
           if(reference == 1)
                {
                model=(DefaultListModel)doin.readObject();

                subtopicList.setModel(model);
                //model.addElement(selectedItem);
                 System.out.println((socket.getInetAddress().toString()).substring(1));
                }
           else JOptionPane.showMessageDialog(this, "No data to fetch!!");
             }
             catch(Exception e){
                 System.out.println("Unable to fetch Data");
             }
         }
        
    }//GEN-LAST:event_courseListMouseClicked

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        // TODO add your handling code here:
         try{
            // teacher.setRequest(7);
             TeacherData tr=new TeacherData();
             tr.setEmail(teacher.getEmail());
             tr.setName(teacher.getName());
             tr.setPassword(teacher.getPassword());
             tr.setReference(teacher.getReferece());
             tr.setRequest(7);
             System.out.println("Sending");
             doout.writeObject(tr);
             System.out.println("Sent");
                 System.out.println("Receiving");
         String str=(String)din.readUTF();
         System.out.println("Received");
         int response= Integer.parseInt(str);
         DefaultListModel model=new DefaultListModel();
         if(response==1){
                 System.out.println("Receiving List");
         model=(DefaultListModel)doin.readObject();
         System.out.println("Received List");
         courseList.setModel(model);
         //courseList.setModel((ListModel) new CountryRenderer());
         DefaultListModel model2=new DefaultListModel();
         
         subtopicList.setModel(model2);
        // subtopicList.setModel((ListModel) new CountryRenderer());
         }
         else JOptionPane.showMessageDialog(this, "No data to fetch");
        }
        catch(Exception e)
        {
            e.printStackTrace();
            System.out.println("Unable to connect!!");;
        }
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void subtopicListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_subtopicListMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 2) {
            
             try{

           String selectedItem = (String) subtopicList.getSelectedValue();
           // add selectedItem to your second list.
           FetchSubtopicData fData=new FetchSubtopicData();
           fData.setRequest(10);
           fData.setCourseName(courseList.getSelectedValue().toString());
           fData.setSubtopicName(selectedItem);
             new TeacherVideos(socket,doout,doin,dout,din,fData,teacher).setVisible(true);
             //this.setVisible(true);
             }
             catch(Exception e){
                 System.out.println("Unable to fetch Data");
             }
         }
        

    }//GEN-LAST:event_subtopicListMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws java.lang.NullPointerException{
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TeacherUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TeacherUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TeacherUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TeacherUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
       // JList<String> jl=new JList<>();
       // jl.add;
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
               new TeacherUI(doout,doin,dout,din,socket,teacher).setVisible(true);
                   // new TeacherUI(dout,din,doout,doin,teacher).setVisible(true);
               
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addCourseButton;
    private javax.swing.JList courseList;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton refreshButton;
    private javax.swing.JList subtopicList;
    private javax.swing.JPanel teacherCoursePanel;
    private javax.swing.JPanel teacherHeaderPanel;
    private javax.swing.JLabel teacherNameLabel;
    private javax.swing.JLabel teacherReferenceLabel;
    private javax.swing.JPanel teacherSubtopicPanel;
    // End of variables declaration//GEN-END:variables
}
